pragma solidity 0.4.26;

/*import "../Universe.sol";
import "../Agreement.sol";
import "../Reclaimable.sol";
import "../ETO/IETOCommitment.sol";
import "./IEquityTokenController.sol";
import "./MEquityTokenController.sol";
import "./IControllerGovernance.sol";*/


/// @title abstract equity token controller
/// implements the following
/// 1. abstract state machine allowing Funded - Offering cycles
/// 2. on-chain action execution that abstracts form of governance
/// 3. equity token controls
/// 4. basic legal structure between nominee and legalRep (ISHA agreement, amendments, share increase, valuation etc., migration)
/*
contract EquityTokenController is
    IEquityTokenController,
    IControllerGovernance,
    MEquityTokenController,
    Agreement,
    KnownInterfaces,
    Reclaimable
{
    ////////////////////////
    // Types
    ////////////////////////

    ////////////////////////
    // Immutable state
    ////////////////////////

    // a root of trust contract
    Universe private UNIVERSE;

    // company representative address
    address private COMPANY_LEGAL_REPRESENTATIVE;

    ////////////////////////
    // Mutable state
    ////////////////////////

    // controller lifecycle state
    GovState private _state;

    // total number of shares owned by Company
    uint256 private _totalCompanyShares;

    // valuation of the company
    uint256 private _companyValuationEurUlps;

    // set of shareholder rights that will be executed
    ShareholderRights private _shareholderRights;

    ////////////////////////
    // Modifiers
    ////////////////////////

    // require caller is ETO in universe
    modifier onlyETO() {
        require(UNIVERSE.isInterfaceCollectionInstance(KNOWN_INTERFACE_COMMITMENT, msg.sender), "NF_ETC_ETO_NOT_U");
        _;
    }

    // require caller is last (active) ETO
    modifier onlyLastETO() {
        // must be still pending
        require(!IETOCommitment(msg.sender).finalized(), "NF_ETC_ETO_NOT_FIN");
        // must be known ETO
        require(mIsRegisteredOffering(msg.sender), "NF_ETC_ETO_NK");
        _;
    }

    modifier onlyCompany() {
        require(msg.sender == COMPANY_LEGAL_REPRESENTATIVE);
        _;
    }

    modifier onlyOperational() {
        require(_state == GovState.Offering || _state = GovState.Funding || _state = GovState.Closing);
        _;
    }

    modifier onlyState(GovState state) {
        require(_state == state);
        _;
    }

    modifier onlyStates(GovState state1, GovState state2) {
        require(_state == state1 || _state == state2);
        _;
    }

    ////////////////////////
    // Constructor
    ////////////////////////

    constructor(
        Universe universe,
        address companyLegalRep
    )
        Agreement(universe.accessPolicy(), universe.forkArbiter())
        Reclaimable()
    {
        UNIVERSE = universe;
        COMPANY_LEGAL_REPRESENTATIVE = companyLegalRep;
    }


    ////////////////////////
    // Public functions
    ////////////////////////

    //
    // Implements IETOCommitmentObserver
    //

    // @dev msg.sender must be valid ETO (universe) for a company legal rep. more conditions may apply
      function registerTokenOffering() public;

      /// add new equity token to company captable, add new successful ETO, sets new number of shares and SHA
      /// @dev msg.sender must be ETO which is the source of token, terms, SHA etc.
      function approveTokenOffering() public;

      // fails ongoing token offering
      /// @dev msg.sender must be ETO
      function failTokenOffering() public;
      // company contract has new token, new eto and new SHA (transfers are enabled on equity token if requested -> company is a controller so in call below)

    // @dev msg.sender must be valid ETO (universe) for a company legal rep. more conditions may apply
    function registerTokenOffering()
        onlyStates(GovState.Setup, GovState.Funded)
        onlyETO
        public
    {
        registerTokenOfferingPrivate(IETOCommitment(msg.sender));
    }

    /// @dev msg.sender must be ETO which is the source of token, terms, SHA etc.
    function approveTokenOffering()
        public
        onlyState(GovState.Offering)
        onlyLastETO
    {
        aproveTokenOfferingPrivate(IETOCommitment(msg.sender));
    }

    /// @dev msg.sender must be ETO
    function failTokenOffering()
        public
        onlyState(GovState.Offering)
        onlyLastETO
    {
        failTokenOfferingPrivate(IETOCommitment(msg.sender));
    }

    //
    // Implements IEquityTokenController (Token Callable)
    //

    function onCloseToken(address)
        public
        constant
        returns (bool)
    {
        return canCloseCompany() && !canCancelCompanyClosing();
    }

    function onChangeTokenController(address, address newController)
        public
        constant
        returns (bool)
    {
        return _state = GovState.Migrated && _newController = newController;
    }

    function onChangeNominee(address sender, address oldNominee, address newNominee)
        public
        constant
        returns (bool)
    {
        // can only be called from this contract
        return sender == address(this);
    }

    //
    // Implements ITokenController
    //

    function onTransfer(address from, address to, uint256 amount)
        public
        constant
        returns (bool)
    {
        return _enableTransfers;
    }

    function onApprove(address owner, address spender, uint256 amount)
        public
        constant
        returns (bool)
    {
        return true;
    }

    function hasPermanentAllowance(address spender, uint256 amount)
        public
        constant
        returns (bool)
    {
        return false;
    }

    function onGenerateTokens(address sender, address owner, uint256 amount)
        public
        constant
        returns (bool)
    {
        return mIsRegisteredOffering(sender) && _state == GovState.Offering;
    }

    function onDestroyTokens(address sender, address owner, uint256 amount)
        public
        constant
        returns (bool)
    {
        return mIsRegisteredOffering(sender) && _state == GovState.Offering;
    }

    //
    // IERC223TokenCallback (proceeds disbursal)
    //

    /// allows contract to receive and distribure proceeds
    function tokenFallback(address from, uint256 amount, bytes data)
        public
        onlyOperational
        onlyCompany
    {
        // only legal rep can send proceeds
        require(from == COMPANY_LEGAL_REPRESENTATIVE, "NF_ETC_TF_O_LEGALREP");
        // only ether and euro tokens
        address[] memory singletons = UNIVERSE.getManySingletons(
            [KNOWN_INTERFACE_ETHER_TOKEN, KNOWN_INTERFACE_EURO_TOKEN, KNOWN_INTERFACE_FEE_DISBURSAL]
        );
        require(msg.sender == singletons[0] || msg.sender == singletons[1]);
        // Eur-t or eth amount
        uint256 expectedAmount = msg.sender == singletons[0] ? _expectedProceedsEth : _expectedProceedsEurUlps;
        // when closing all proceeds must be paid in one go
        if(_state == GovState.Closing) {
            require(expectedAmount == amount, "NF_ETC_PROC_CLS_FULL");
        } else {
            require(expectedAmount >= amount, "NF_ETC_PROC_EXC");
        }
        // bookeeping
        if (msg.sender == singletons[0]) {
            _expectedProceedsEth -= amount;
        } else {
            _expectedProceedsEurUlps -= amount;
        }
        // disburse
        assert(singletons[2] != address(0));
        // msg.sender is payment token, send to disbursal pool
        mDisburseProceeds(IERC223Token(msg.sender), amount);
        // assert(IERC223Token(msg.sender).transfer(singletons[2], amount, addressToBytes(equityToken)));

        emit LogProceedsDisbursed(from, amount, msg.sender);
    }

    //
    // Implements IControllerGovernance
    //

    function shareholderInformation()
        public
        constant
        returns (
            uint256 totalCompanyShares,
            uint256 companyValuationEurUlps,
            ShareholderRights shareholderRights
        )
    {
        return (
            _totalCompanyShares,
            _companyValuationEurUlps,
            _shareholderRights
        );
    }

    function capTable()
        public
        constant
        returns (
            address[] equityTokens,
            uint256[] shares
        )
    {

    }

    function issueGeneralInformation(
        string informationType,
        string informationUrl
    )
        public
        onlyOperational
        onlyCompany
    {
        // we emit this as Ethereum event, no need to store this in contract storage
        emit LogGeneralInformation(COMPANY_LEGAL_REPRESENTATIVE, informationType, informationUrl);
    }

    function startResolution(string title, string resolutionUri, Action action, bytes payload)
        public
        onlyState(GovState.Offering, GovState.Funded)
        onlyCompany
        returns (bytes32 resolutionId)
    {
        requires(title.length > 0);
        requires(resolutionUri.length > 0);
        // parses RLP encoded payload and checks if parameters may be executed
        validateResolution(action, payload);

        resolutionId = keccak256(resolutionUri);
        mOnStartResolution(resolutionId, resolutionUri, action, payload);

        emit LogResolutionStarted(resolutionId, resolutionUri, action, payload);
    }


    function executeResolution(bytes32 resolutionId)
        public
        onlyOperational
    {
        mOnExecuteResolution(resolutionId);
    }

    // this will close company (terminal state) and close all associated tokens
    // @dev no access permissions - anyone can close if all conditions are met
    function closeCompany()
        public
        onlyState(GovState.Closing)
    {
        // revert if can cancel company closing (deadline for payments expired)
        require(!canCancelCompanyClosing(), "NF_ETC_CLOSE_CAN_CANCEL");
        // revert if there any pending obligations (currently proceeds)
        require(canCloseCompany(), "NF_ETC_CLOSE_OBLIG");

        closeCompanyPrivate();
    }

    // this will cancel closing of the company due to obligations not met in time
    // @dev no access permissions - anyone can cancel if conditions met
    function cancelCompanyClosing()
        public
        onlyState(GovState.Closing)
    {
        require(canCancelCompanyClosing(), "NF_ETC_CLOSE_CANNOT_CANCEL");
        // will enable transfers if necessary
        cancelCompanyClosingPrivate();
    }

    ////////////////////////
    // Internal functions
    ////////////////////////

    //
    // Overrides Agreement
    //

    function mCanAmend(address legalRepresentative)
        internal
        returns (bool)
    {
        // only controller contract can amend ISHA typically due to resolution
        return legalRepresentative == address(this);
    }

    function executeAction(bytes32 resolutionId, Action action, bytes payload)
        internal
    {
        if (action == Action.None) {
            return;
        }
        if (action == Action.StopToken) {
            enableTransfers(resolutionId, false);
        }
        if (action == Action.ContinueToken) {
            enableTransfers(resolutionId, true);
        }
        uint256 proceedsEurUlps;
        uint256 proceedsEth;
        if (action == Action.Payout) {
            // todo: load from RLP
            registerProceeds(resolutionId, proceedsEurUlps, proceedsEth);
        }
        if (action == Action.CloseToken) {
            // todo: load from RLP
            uint32 closingDeadlineDays;
            startCompanyClosing(resolutionId, proceedsEurUlps, proceedsEth, closingDeadlineDays);
        }
        if (action == Action.ChangeTokenController) {
            // todo: load from RLP
            address newTokenController;
            migrateTokenController(resolutionId, newTokenController);
        }
        if (action == Action.AmendISHA) {
            // todo: load from RLP
            uint256 totalShares;
            uint256 companyValuationEurUlps;
            ShareholderRights newShareholderRights;
            amendISHA(
                resolutionId,
                mGetResolutionDocumentUrl(resolutionId),
                totalShares,
                companyValuationEurUlps,
                newShareholderRights
            );
        }
        if (action == Action.ChangeNominee) {
            // todo: load from RLP
            address equityToken;
            changeNominee(resolutionId, equityToken);
        }
        revert("NF_ETC_NOT_IMPL");
    }

    ////////////////////////
    // Private functions
    ////////////////////////

    function registerTokenOfferingPrivate(bytes32 resolutionId, IETOCommitment tokenOffering)
        private
    {
        IEquityToken equityToken = tokenOffering.equityToken();
        // require nominee match and agreement signature
        var (legalRep,,,) = equityToken.currentAgreement();
        require(legalRep == _nominee, "NF_NDT_ET_A_MIS");
        require(equityToken.nominee() == _nominee, "NF_NDT_ET_N_MIS");
        // require token controller match
        require(equityToken.equityTokenController() == address(this), "NF_NDT_ET_TC_MIS");
        // require nominee and agreement match
        (legalRep,,,) = tokenOffering.currentAgreement();
        require(legalRep == _nominee, "NF_NDT_ETO_A_MIS");
        // require terms set and legalRep match
        require(tokenOffering.etoTerms() != address(0), "NF_NDT_ETO_NO_TERMS");
        require(tokenOffering.companyLegalRep() == COMPANY_LEGAL_REPRESENTATIVE, "NF_NDT_ETO_LREP_MIS");

        mAddTokenOffering(eto, et);

        transitionTo(GovState.Offering);
        emit LogOfferingRegistered(tokenOffering, equityToken);
    }

    function aproveTokenOfferingPrivate(IETOCommitment tokenOffering)
        private
    {
        var (newShares,,,,,) = tokenOffering.signedOfferingResults();
        uint256 totalShares = tokenOffering.ETO_TERMS().TOTAL_COMPANY_SHARES + newShares;
        uint256 marginalPrice = tokenOffering.marginalPriceEurUlps();
        string ISHAUrl = tokenOffering.ETO_TERMS().signedInvestmentAgreementUrl();
        // signed ISHA is our resolution in this case
        bytes32 resolutionId = calculateResolutionId(ISHAUrl);
        amendISHA(
            resolutionId,
            ISHAUrl,
            totalShares,
            totalShares * marginalPrice,
            tokenOffering.ETO_TERMS().SHAREHOLDER_RIGTHS()
        );
        // execute shareholder rights
        enableTransfers(resolutionId, tokenOffering.ETO_TERMS().ENABLE_TRANSFERS_ON_SUCCESS);
        transitionTo(Status.Funded);

        emit LogOfferingSucceeded(tokenOffering, newShares, newShares * marginalPrice);
    }

    function failTokenOfferingPrivate(IETOCommitment tokenOffering)
        private
    {
        // this will close all the token
        if (amendmentsCount() == 0) {
            // there is no ISHA so first primary offering failed. close the company contract
            closeCompanyPrivate();
        } else {
            transitionTo(Status.Funded);
        }
        emit LogOfferingFailed(tokenOffering);
    }

    function amendISHA(
        bytes32 resolutionId,
        string ISHAUrl,
        uint256 totalShares,
        uint256 companyValuationEurUlps,
        ShareholderRights newShareholderRights
    )
        private
    {
        // set ISHA
        amendAgreement(ishaUrl);
        // set new number of shares
        _totalCompanyShares = totalShares;
        // set new valuation
        _companyValuationEurUlps = companyValuationEurUlps;
        // set shareholder rights corresponding to SHA part of ISHA
        _shareholderRights = newShareholderRights;
        emit LogISHAAmended(resolutionId, ISHAUrl, totalShares, companyValuationEurUlps, newShareholderRights);
    }

    function startCompanyClosing(bytes32 resolutionId, uint256 proceedsEurUlps, uint256 proceedsEth, uint32 closingDeadlineDays)
        private
    {
        // add proceeds to be paid
        registerProceeds(resolutionId, proceedsEurUlps, proceedsEth);
        // register pending company closing
        registerClosing(resolutionId, closingDeadlineDays);
        // close immediately if possible
        if (canCloseCompany()) {
            // this will close all the tokens
            closeCompanyPrivate();
        }
    }

    function enableTransfers(bytes32 resolutionId, bool transfersEnabled)
        private
    {
        if (_transfersEnabled != transfersEnabled) {
            _transfersEnabled = transfersEnabled;
        }

        emit LogTransfersEnabled(resolutionId, transfersEnabled);
    }

    function registerProceeds(bytes32 resolutionId, uint256 proceedsEurUlps, uint256 proceedsEth)
        private
    {
        _expectedProceedsEurUlps += proceedsEurUlps;
        _expectedProceedsEth +=  proceedsEth;

        emit LogExpectedProceeds(resolutionId, proceedsEurUlps, proceedsEth);
    }

    function registerClosing(bytes32 resolutionId, uint32 closingDeadlineDays)
        private
    {
        // store closing data
        _closingResolutionId = resolutionId;
        _closingDeadline = block.timestamp + closingDeadlineDays * 1 days;
        _closingTransfersState = _transfersEnabled;
        // stop token
        enableTransfers(resolutionId, false);
        // company is being closed
        transitionTo(GovState.Closing);

        emit LogCompanyClosing(resolutionId, proceedsEurUlps, proceedsEth, closingDeadlineDays);
    }

    function canCloseCompany()
        private
        constant
        returns (bool)
    {
        // all the pending proceeds were paid
        bool noPendingProceeds = _expectedProceedsEurUlps == 0 && _expectedProceedsEth == 0;
        return noPendingProceeds && _state == GovState.Closing;
    }

    function closeCompanyPrivate()
        private
    {
        mCloseTokens();
        transitionTo(GovState.Closed);

        emit LogCompanyClosed(_closingResolutionId);
    }

    function canCancelCompanyClosing()
        private
        constant
        returns (bool)
    {
        uint256 t = block.timestamp;
        return t > _closingDeadline && _state == GovState.Closing;
    }

    function cancelCompanyClosingPrivate()
        private
    {
        enableTransfers(_closingResolutionId, _closingTransfersState);
        bytes32 resolutionId = _closingResolutionId;
        _closingResolutionId = bytes(0);
        _closingDeadline = 0;
        transitionTo(GovState.Closed);

        emit LogCompanyClosingCancelled(resolutionId);
    }

    function migrateTokenController(bytes32 resolutionId, address newTokenController)
        private
    {
        _newTokenController = newTokenController;
        transitionTo(GovState.Migrated);
        mChangeTokenController(newTokenController);
        // todo: define IEquityTokenControllerMigration and call accordingly
        // newTokenController.migrated();

        emit LogMigratedTokenController(resolutionId, newTokenController);
    }

    function changeNominee(bytes32 resolutionId, IEquityToken equityToken, address newNominee)
        private
    {
        equityToken.changeNominee(newNominee);

        emit LogChangedNominee(equityToken, newNominee);
    }
}*/
